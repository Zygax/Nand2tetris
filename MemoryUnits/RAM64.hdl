// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 RAM8s, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:


DMux8Way(in=load, sel=address[0..2], a=dA, b=dB, c=dC, d=dD, e=dE, f=dF, g=dG, h=dH);


RAM8(in=in, load=dA, address=address[3..5], out=OA);
RAM8(in=in, load=dB, address=address[3..5], out=OB);
RAM8(in=in, load=dC, address=address[3..5], out=OC);
RAM8(in=in, load=dD, address=address[3..5], out=OD);
RAM8(in=in, load=dE, address=address[3..5], out=OE);
RAM8(in=in, load=dF, address=address[3..5], out=OF);
RAM8(in=in, load=dG, address=address[3..5], out=OG);
RAM8(in=in, load=dH, address=address[3..5], out=OH);


    Mux8Way16(a=OA, b=OB, c=OC, d=OD, e=OE, f=OF, g=OG, h=OH, sel=address[0..2], out=out);
}
